{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","m","SearchBox","palceHolder","handleFunc","type","placeholder","onChange","App","setSearchField","sf","setState","searchField","target","value","state","a","fetch","data","json","data_json","this","filteredMonster","filter","toLowerCase","includes","placeHolder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAEaA,EAAO,SAACC,GACjB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,6BACKL,EAAMI,QAAQE,OAEnB,4BAAIN,EAAMI,QAAQG,YCLbC,EAAW,SAACR,GAErB,OACA,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAC,GAAC,OACd,cAAC,EAAD,CAAiBP,QAAWO,EAA5B,cAAWA,EAAEN,UCLZO,G,MAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,WACpC,OACC,uBAAOb,UAAU,SAASc,KAAK,SAASC,YAAaH,EAAaI,SAAUH,MCuClEI,E,kDAvCb,aAAe,IAAD,8BACZ,gBAeFC,eAAkB,SAAAC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAGG,OAAOC,SAfrC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IAJH,E,4FAUd,8BAAAI,EAAA,sEACqBC,MAAM,8CAD3B,cACQC,EADR,gBAE0BA,EAAKC,OAF/B,OAEQC,EAFR,OAGEC,KAAKV,SAAS,CAACZ,SAAUqB,IAH3B,gD,0EAgBA,WAAU,IAAD,EACyBC,KAAKN,MAA9BhB,EADA,EACAA,SAAUa,EADV,EACUA,YACXU,EAAkBvB,EAASwB,QAAO,SAAAtB,GAAC,OAAIA,EAAEL,KAAK4B,cAAcC,SAASb,EAAYY,kBACvF,OACE,sBAAKjC,UAAU,MAAf,UACE,oBAAII,GAAG,WAAP,8BACA,cAAC,EAAD,CAAW+B,YAAY,kBAAkBtB,WAAYiB,KAAKZ,iBAC1D,cAAC,EAAD,CAAUV,SAAYuB,W,GAlCZK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2adf3b6b.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\nexport const Card = (props) => {\n    return (\n    <div className='card-container'>\n        <img alt='monster' src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2>\n            {props.monster.name}\n        </h2>\n        <p>{props.monster.email}</p>\n    </div>\n    )\n}","import React from 'react';\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n    \n    return (\n    <div className='card-list'> \n     {props.monsters.map(m => \n            <Card key={m.id} monster = {m}> </Card>\n          )}\n        </div>)\n}","import React from 'react'\nimport './search-box.styles.css'\n\n\nexport const SearchBox = ({palceHolder, handleFunc}) => {\n    return (\n     <input className='search' type='search' placeholder={palceHolder} onChange={handleFunc}/>\n    )\n};","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    //this.bindMEthod = this.bindMEthod.bind(this);  // bind method so it can use this in it\n  }\n\n  async componentDidMount() {\n    const data = await fetch('https://jsonplaceholder.typicode.com/users')\n    const data_json = await data.json();\n    this.setState({monsters: data_json});\n  };\n\n  setSearchField =  sf => {\n   this.setState({searchField: sf.target.value});\n  };\n\n  // only for demo\n  // bindMEthod(bm) {\n  //   console.log(\"I am bind method\")\n  // };\n\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonster = monsters.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1 id='appTitle'>MONSTERS ROLODEX</h1>\n        <SearchBox placeHolder='search monsters' handleFunc={this.setSearchField} ></SearchBox>\n        <CardList monsters = {filteredMonster}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}